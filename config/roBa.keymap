#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LEFT_ALT Q             &kp W   &kp E         &kp R       &kp T                                               &kp Y        &kp U  &lt 4 I                 &kp O    &mt RIGHT_ALT P
&mt LCTRL A                &kp S   &kp D         &kp F       &kp G        &kp LS(LG(S))           &trans         &kp H        &kp J  &kp K                   &kp L    &mt RCTRL SEMICOLON
&mt LEFT_SHIFT LEFT_SHIFT  &kp X   &kp C         &kp V       &kp B        &lt_to_layer_0 5 A      &trans         &kp N        &kp M  &lt_to_layer_0 4 COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&trans                     &trans  &kp LEFT_WIN  &kp ESCAPE  &lt 2 SPACE  &kp TAB                 &kp BACKSPACE  &lt 1 ENTER                                          &trans
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                       &kp NUMBER_6  &kp N7    &kp N8  &kp N9     &kp N0
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5   &trans      &trans  &kp LEFT      &kp DOWN  &kp UP  &kp RIGHT  &trans
&kp F6        &kp F7        &kp F8        &kp F9        &kp F10  &trans      &trans  &kp F11       &kp F12   &trans  &trans     &trans
&trans        &trans        &trans        &trans        &trans   &trans      &trans  &trans                                     &trans
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN        &kp POUND  &kp DOLLAR  &kp PERCENT                      &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp LCTRL        &kp COMMA          &mkp LCLK  &mkp RCLK   &kp TILDE    &trans      &trans  &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp NON_US_BACKSLASH
&kp LEFT_SHIFT   &kp DOUBLE_QUOTES  &mkp MCLK  &trans      &kp GRAVE    &trans      &trans  &kp UNDERSCORE  &kp PLUS       &kp LEFT_BRACE    &kp RIGHT_BRACE       &kp PIPE
&trans           &trans             &trans     &trans      &trans       &trans      &trans  &trans                                                                 &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BT {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
